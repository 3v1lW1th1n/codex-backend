import os
import math
import traceback


class MetaController:
	
	def __init__(self):
		self.PAGE_SIZE=4096
		#self.PAGE_SIZE=1024
		self.HEADER_SIZE=512
		self.DATA_SIZE=self.PAGE_SIZE-self.HEADER_SIZE
		self.index_dic={}
		self.size=0
		
		dir="../DB/metadata"
		if(not os.path.exists(dir)):
			os.makedirs(dir)
	
	
		
	def __delete__(self):
		pass	
	
	def loadIndex(self):
		try:
			fd=open("../DB/metadata/"+str(0)+".metapack","r+")
			page_num=0
			while(True):
				page=fd.read(self.PAGE_SIZE)
				if(len(page)==0):break
				index=page[:self.HEADER_SIZE].split('|')
				file_id=index[0]
				part_number=int(index[1])
				len_data=int(index[2])
				next_page=int(index[3])
				if(part_number==0):
					new_entry=[]
					new_entry.append(False)
					new_entry.append(0)
					new_entry.append(page_num)
					new_entry.append(1)
					new_entry.append([])
					self.index_dic[file_id]=new_entry
				else:
					entry=self.index_dic.get(file_id)
					list_page=entry[4]
					list_page.append(page_num)
					new_entry=[]
					new_entry.append(False)
					new_entry.append(0)
					new_entry.append(entry[2])
					new_entry.append(entry[3]+1)
					new_entry.append(list_page)
					self.index_dic[file_id]=new_entry
				page_num+=1
			
			self.size=page_num
			
			for e in self.index_dic:
				new_segmented=False
				ent=self.index_dic[e]
				sg_page=ent[2]
				for n in ent[4]:
					if(n-1!=sg_page):
						new_segmented=True
						break
					else:
						sg_page=n
				ent[0]=new_segmented	
				self.index_dic[e]=ent	
				#print(self.index_dic[e])
		except:
			#print(traceback.format_exc())
			pass
			
	def read(self,file_id):
		entry=self.index_dic.get(file_id)
		if(entry==None):return None
		
		try:
			fd=open("../DB/metadata/"+str(0)+".metapack","r")
		except:
			return None
		
		meta=""
		f_page=entry[2]
		p_to_read=entry[4]
		
		fd.seek(self.PAGE_SIZE*f_page)
		data=fd.read(self.PAGE_SIZE)
		header=data[0:self.HEADER_SIZE].split('|')
		meta_size=int(header[2])
		meta=meta+data[self.HEADER_SIZE:(self.HEADER_SIZE+meta_size)]
		
		for p in p_to_read:
			fd.seek(self.PAGE_SIZE*p)
			data=fd.read(self.PAGE_SIZE)
			header=data[0:self.HEADER_SIZE].split('|')
			meta_size=int(header[2])
			meta=meta+data[self.HEADER_SIZE:(self.HEADER_SIZE+meta_size)]	
		
		return meta
		
	def write(self,file_id,data):
		#fd=open("../DB/metadata/"+str(file_id)+".xml","w+")
		#fd.write(data)
		entry=self.index_dic.get(file_id)
		if(entry==None):
			segmented=False
			pack=0
			first_page=self.size
			self.size+=1
			total_partitions=0
			partitions_to_read=[]
		else:
			segmented=entry[0]
			pack=entry[1]
			first_page=entry[2]
			total_partitions=entry[3]
			partitions_to_read=entry[4]
			
		new_total_partitions=int(math.ceil((1.0*len(data))/(self.DATA_SIZE)))
		new_pack=pack
		new_page=first_page
		new_partitions_to_read=[]
		new_segmented=False
		new_entry=[]
		
		try:
			fd=open("../DB/metadata/"+str(pack)+".metapack","r+")
		except:
			fd=open("../DB/metadata/"+str(pack)+".metapack","w+")
			
		part_number=0
		current_page=first_page
		for i in range(new_total_partitions-1):
			#genera header
			if(len(partitions_to_read)>=1):
				next_page=partitions_to_read.pop(0)
			else:
				next_page=self.size
				self.size+=1
				
			new_partitions_to_read.append(next_page)			
			header=str(file_id)+"|"+str(part_number)+"|"+str(self.DATA_SIZE)+"|"+str(next_page)+"|"
			header=header.ljust(self.HEADER_SIZE,'0')
			
			to_write=header+data[0:self.DATA_SIZE]
			#print(len(to_write))
			data=data[self.DATA_SIZE:]
			fd.seek(current_page*self.PAGE_SIZE)
			fd.write(to_write)
			current_page=next_page
			part_number+=1
		
		header=str(file_id)+"|"+str(part_number)+"|"+str(len(data))+"|"+str(-1)+"|"
		header=header.ljust(self.HEADER_SIZE,'0')
		to_write=header+data.ljust(self.DATA_SIZE,'0')
		fd.seek(current_page*self.PAGE_SIZE)
		fd.write(to_write)
		
		sg_page=new_page
		for n in new_partitions_to_read:
			if(n-1!=sg_page):
				new_segmented=True
				break
			else:
				sg_page=n
				
		new_entry.append(new_segmented)
		new_entry.append(new_pack)
		new_entry.append(new_page)
		new_entry.append(new_total_partitions)
		new_entry.append(new_partitions_to_read)
		
		self.index_dic[file_id]=new_entry
		#print(new_entry)
		return
			
	def defragment(self):
		pass
			
#****************TEST_CODE******************
def testCode():
	pass
	
	
#****************TEST_EXECUTE******************
from Utils.test import test
test("-test_MetaController",testCode)
